{"version":3,"sources":["../../../src/api/controllers/invoice.controller.js"],"names":["findAll","req","res","next","Invoice","find","then","invoices","json","catch","err","status","StatusCodes","INTERNAL_SERVER_ERROR","create","schema","Joi","object","item","string","required","date","due","qty","number","integer","tax","optional","rate","validate","body","error","value","BAD_REQUEST","invoice","findOne","nex","id","params","findById","NOT_FOUND","delete","findByIdAndRemove","update","findByIdAndUpdate"],"mappings":"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","file":"invoice.controller.js","sourcesContent":["import Joi from \"joi\";\r\nimport { StatusCodes } from \"http-status-codes\";\r\n\r\nimport Invoice from \"../models/invoice.model\";\r\n\r\nexport default {\r\n  findAll(req, res, next) {\r\n    Invoice.find()\r\n      .then((invoices) => res.json(invoices))\r\n      .catch((err) => res.status(StatusCodes.INTERNAL_SERVER_ERROR).json(err));\r\n  },\r\n  create(req, res, next) {\r\n    const schema = Joi.object({\r\n      item: Joi.string().required(),\r\n      date: Joi.date().required(),\r\n      due: Joi.date().required(),\r\n      qty: Joi.number().integer().required(),\r\n      tax: Joi.number().optional(),\r\n      rate: Joi.number().optional(),\r\n    });\r\n\r\n    const { error, value } = schema.validate(req.body);\r\n    if (error) {\r\n      return res.status(StatusCodes.BAD_REQUEST).json(error);\r\n    }\r\n\r\n    Invoice.create(value)\r\n      .then((invoice) => res.json(invoice))\r\n      .catch((err) => res.status(StatusCodes.INTERNAL_SERVER_ERROR).json(err));\r\n  },\r\n  findOne(req, res, nex) {\r\n    const { id } = req.params;\r\n    Invoice.findById(id)\r\n      .then((invoice) => {\r\n        if (!invoice) {\r\n          return res\r\n            .status(StatusCodes.NOT_FOUND)\r\n            .json({ err: \"Could not find any invoice\" });\r\n        }\r\n\r\n        return res.json(invoice);\r\n      })\r\n      .catch((err) => res.status(StatusCodes.INTERNAL_SERVER_ERROR).json(err));\r\n  },\r\n  delete(req, res, next) {\r\n    const { id } = req.params;\r\n    Invoice.findByIdAndRemove(id)\r\n      .then((invoice) => {\r\n        if (!invoice) {\r\n          return res\r\n            .status(StatusCodes.NOT_FOUND)\r\n            .json({ err: \"Could not delete any invoice\" });\r\n        }\r\n\r\n        return res.json(invoice);\r\n      })\r\n      .catch((err) => res.status(StatusCodes.INTERNAL_SERVER_ERROR).json(err));\r\n  },\r\n  update(req, res, next) {\r\n    const schema = Joi.object({\r\n      item: Joi.string().optional(),\r\n      date: Joi.date().optional(),\r\n      due: Joi.date().optional(),\r\n      qty: Joi.number().integer().optional(),\r\n      tax: Joi.number().optional(),\r\n      rate: Joi.number().optional(),\r\n    });\r\n\r\n    const { error, value } = schema.validate(req.body);\r\n    if (error) {\r\n      return res.status(StatusCodes.BAD_REQUEST).json(error);\r\n    }\r\n\r\n    const { id } = req.params;\r\n    Invoice.findByIdAndUpdate(id, value)\r\n      .then((invoice) => {\r\n        if (!invoice) {\r\n          return res\r\n            .status(StatusCodes.NOT_FOUND)\r\n            .json({ err: \"Could not update any invoice\" });\r\n        }\r\n        return res.json(invoice);\r\n      })\r\n      .catch((err) => res.status(StatusCodes.INTERNAL_SERVER_ERROR).json(err));\r\n  },\r\n};\r\n"]}