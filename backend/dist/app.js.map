{"version":3,"sources":["../src/app.js"],"names":["mongoose","Promise","global","connect","app","PORT","use","express","json","urlencoded","swaggerUi","serve","setup","swaggerDocument","explorer","router","req","res","next","error","Error","message","status","StatusCodes","NOT_FOUND","INTERNAL_SERVER_ERROR","listen","console","log"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AAEA;;;;AAEAA,mBAASC,OAAT,GAAmBC,OAAOD,OAA1B;AACAD,mBAASG,OAAT,CAAiB,qCAAjB;;AAEA,IAAMC,MAAM,wBAAZ;AACA,IAAMC,OAAO,IAAb;;AAEAD,IAAIE,GAAJ,CAAQC,kBAAQC,IAAR,EAAR;AACAJ,IAAIE,GAAJ,CAAQC,kBAAQE,UAAR,EAAR;AACAL,IAAIE,GAAJ,CAAQ,sBAAO,KAAP,CAAR;AACAF,IAAIE,GAAJ,CACE,WADF,EAEEI,2BAAUC,KAFZ,EAGED,2BAAUE,KAAV,CAAgBC,iBAAhB,EAAiC;AAC/BC,YAAU;AADqB,CAAjC,CAHF;AAOAV,IAAIE,GAAJ,CAAQ,MAAR,EAAgBS,cAAhB;AACAX,IAAIE,GAAJ,CAAQ,UAACU,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC1B,MAAMC,QAAQ,IAAIC,KAAJ,CAAU,YAAV,CAAd;AACAD,QAAME,OAAN,GAAgB,eAAhB;AACAF,QAAMG,MAAN,GAAeC,6BAAYC,SAA3B;AACAN,OAAKC,KAAL;AACD,CALD;AAMAf,IAAIE,GAAJ,CAAQ,UAACa,KAAD,EAAQH,GAAR,EAAaC,GAAb,EAAkBC,IAAlB,EAA2B;AACjCD,MAAIK,MAAJ,CAAWH,MAAMG,MAAN,IAAgBC,6BAAYE,qBAAvC;AACA,SAAOR,IAAIT,IAAJ,CAAS;AACdW,WAAO;AACLE,eAASF,MAAME;AADV;AADO,GAAT,CAAP;AAKD,CAPD;;AASAjB,IAAIsB,MAAJ,CAAWrB,IAAX,EAAiB,YAAY;AAC3BsB,UAAQC,GAAR,2BAAoCvB,IAApC;AACD,CAFD","file":"app.js","sourcesContent":["import express from \"express\";\r\nimport mongoose from \"mongoose\";\r\nimport logger from \"morgan\";\r\nimport { StatusCodes } from \"http-status-codes\";\r\nimport swaggerUi from \"swagger-ui-express\";\r\nimport swaggerDocument from \"./config/swagger.json\";\r\n\r\nimport { router } from \"./config/routes\";\r\n\r\nmongoose.Promise = global.Promise;\r\nmongoose.connect(\"mongodb://localhost/invoice-builder\");\r\n\r\nconst app = express();\r\nconst PORT = 3000;\r\n\r\napp.use(express.json());\r\napp.use(express.urlencoded());\r\napp.use(logger(\"dev\"));\r\napp.use(\r\n  \"/api-docs\",\r\n  swaggerUi.serve,\r\n  swaggerUi.setup(swaggerDocument, {\r\n    explorer: true,\r\n  })\r\n);\r\napp.use(\"/api\", router);\r\napp.use((req, res, next) => {\r\n  const error = new Error(\"Not Found!\");\r\n  error.message = \"Invalid Route\";\r\n  error.status = StatusCodes.NOT_FOUND;\r\n  next(error);\r\n});\r\napp.use((error, req, res, next) => {\r\n  res.status(error.status || StatusCodes.INTERNAL_SERVER_ERROR);\r\n  return res.json({\r\n    error: {\r\n      message: error.message,\r\n    },\r\n  });\r\n});\r\n\r\napp.listen(PORT, function () {\r\n  console.log(`Server is running at ${PORT}`);\r\n});\r\n"]}