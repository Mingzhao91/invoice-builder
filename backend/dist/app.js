"use strict";

var _express = require("express");

var _express2 = _interopRequireDefault(_express);

var _mongoose = require("mongoose");

var _mongoose2 = _interopRequireDefault(_mongoose);

var _morgan = require("morgan");

var _morgan2 = _interopRequireDefault(_morgan);

var _httpStatusCodes = require("http-status-codes");

var _swaggerUiExpress = require("swagger-ui-express");

var _swaggerUiExpress2 = _interopRequireDefault(_swaggerUiExpress);

var _swagger = require("./config/swagger.json");

var _swagger2 = _interopRequireDefault(_swagger);

var _cors = require("cors");

var _cors2 = _interopRequireDefault(_cors);

var _api = require("./api");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_mongoose2.default.Promise = global.Promise;
_mongoose2.default.connect("mongodb://localhost/invoice-builder");

var app = (0, _express2.default)();
var PORT = 3000;

app.use(_express2.default.json());
app.use(_express2.default.urlencoded({ extended: true }));
app.use((0, _cors2.default)());
app.use((0, _morgan2.default)("dev"));
app.use("/api-docs", _swaggerUiExpress2.default.serve, _swaggerUiExpress2.default.setup(_swagger2.default, {
  explorer: true
}));
app.use("/api", _api.restRouter);
app.use(function (req, res, next) {
  var error = new Error("Not Found!");
  error.message = "Invalid Route";
  error.status = _httpStatusCodes.StatusCodes.NOT_FOUND;
  next(error);
});
app.use(function (error, req, res, next) {
  res.status(error.status || _httpStatusCodes.StatusCodes.INTERNAL_SERVER_ERROR);
  return res.json({
    error: {
      message: error.message
    }
  });
});

app.listen(PORT, function () {
  console.log("Server is running at " + PORT);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9hcHAuanMiXSwibmFtZXMiOlsibW9uZ29vc2UiLCJQcm9taXNlIiwiZ2xvYmFsIiwiY29ubmVjdCIsImFwcCIsIlBPUlQiLCJ1c2UiLCJleHByZXNzIiwianNvbiIsInVybGVuY29kZWQiLCJleHRlbmRlZCIsInN3YWdnZXJVaSIsInNlcnZlIiwic2V0dXAiLCJzd2FnZ2VyRG9jdW1lbnQiLCJleHBsb3JlciIsInJlc3RSb3V0ZXIiLCJyZXEiLCJyZXMiLCJuZXh0IiwiZXJyb3IiLCJFcnJvciIsIm1lc3NhZ2UiLCJzdGF0dXMiLCJTdGF0dXNDb2RlcyIsIk5PVF9GT1VORCIsIklOVEVSTkFMX1NFUlZFUl9FUlJPUiIsImxpc3RlbiIsImNvbnNvbGUiLCJsb2ciXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFFQUEsbUJBQVNDLE9BQVQsR0FBbUJDLE9BQU9ELE9BQTFCO0FBQ0FELG1CQUFTRyxPQUFULENBQWlCLHFDQUFqQjs7QUFFQSxJQUFNQyxNQUFNLHdCQUFaO0FBQ0EsSUFBTUMsT0FBTyxJQUFiOztBQUVBRCxJQUFJRSxHQUFKLENBQVFDLGtCQUFRQyxJQUFSLEVBQVI7QUFDQUosSUFBSUUsR0FBSixDQUFRQyxrQkFBUUUsVUFBUixDQUFtQixFQUFFQyxVQUFVLElBQVosRUFBbkIsQ0FBUjtBQUNBTixJQUFJRSxHQUFKLENBQVEscUJBQVI7QUFDQUYsSUFBSUUsR0FBSixDQUFRLHNCQUFPLEtBQVAsQ0FBUjtBQUNBRixJQUFJRSxHQUFKLENBQ0UsV0FERixFQUVFSywyQkFBVUMsS0FGWixFQUdFRCwyQkFBVUUsS0FBVixDQUFnQkMsaUJBQWhCLEVBQWlDO0FBQy9CQyxZQUFVO0FBRHFCLENBQWpDLENBSEY7QUFPQVgsSUFBSUUsR0FBSixDQUFRLE1BQVIsRUFBZ0JVLGVBQWhCO0FBQ0FaLElBQUlFLEdBQUosQ0FBUSxVQUFDVyxHQUFELEVBQU1DLEdBQU4sRUFBV0MsSUFBWCxFQUFvQjtBQUMxQixNQUFNQyxRQUFRLElBQUlDLEtBQUosQ0FBVSxZQUFWLENBQWQ7QUFDQUQsUUFBTUUsT0FBTixHQUFnQixlQUFoQjtBQUNBRixRQUFNRyxNQUFOLEdBQWVDLDZCQUFZQyxTQUEzQjtBQUNBTixPQUFLQyxLQUFMO0FBQ0QsQ0FMRDtBQU1BaEIsSUFBSUUsR0FBSixDQUFRLFVBQUNjLEtBQUQsRUFBUUgsR0FBUixFQUFhQyxHQUFiLEVBQWtCQyxJQUFsQixFQUEyQjtBQUNqQ0QsTUFBSUssTUFBSixDQUFXSCxNQUFNRyxNQUFOLElBQWdCQyw2QkFBWUUscUJBQXZDO0FBQ0EsU0FBT1IsSUFBSVYsSUFBSixDQUFTO0FBQ2RZLFdBQU87QUFDTEUsZUFBU0YsTUFBTUU7QUFEVjtBQURPLEdBQVQsQ0FBUDtBQUtELENBUEQ7O0FBU0FsQixJQUFJdUIsTUFBSixDQUFXdEIsSUFBWCxFQUFpQixZQUFZO0FBQzNCdUIsVUFBUUMsR0FBUiwyQkFBb0N4QixJQUFwQztBQUNELENBRkQiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGV4cHJlc3MgZnJvbSBcImV4cHJlc3NcIjtcclxuaW1wb3J0IG1vbmdvb3NlIGZyb20gXCJtb25nb29zZVwiO1xyXG5pbXBvcnQgbG9nZ2VyIGZyb20gXCJtb3JnYW5cIjtcclxuaW1wb3J0IHsgU3RhdHVzQ29kZXMgfSBmcm9tIFwiaHR0cC1zdGF0dXMtY29kZXNcIjtcclxuaW1wb3J0IHN3YWdnZXJVaSBmcm9tIFwic3dhZ2dlci11aS1leHByZXNzXCI7XHJcbmltcG9ydCBzd2FnZ2VyRG9jdW1lbnQgZnJvbSBcIi4vY29uZmlnL3N3YWdnZXIuanNvblwiO1xyXG5pbXBvcnQgY29ycyBmcm9tIFwiY29yc1wiO1xyXG5pbXBvcnQgeyByZXN0Um91dGVyIH0gZnJvbSBcIi4vYXBpXCI7XHJcblxyXG5tb25nb29zZS5Qcm9taXNlID0gZ2xvYmFsLlByb21pc2U7XHJcbm1vbmdvb3NlLmNvbm5lY3QoXCJtb25nb2RiOi8vbG9jYWxob3N0L2ludm9pY2UtYnVpbGRlclwiKTtcclxuXHJcbmNvbnN0IGFwcCA9IGV4cHJlc3MoKTtcclxuY29uc3QgUE9SVCA9IDMwMDA7XHJcblxyXG5hcHAudXNlKGV4cHJlc3MuanNvbigpKTtcclxuYXBwLnVzZShleHByZXNzLnVybGVuY29kZWQoeyBleHRlbmRlZDogdHJ1ZSB9KSk7XHJcbmFwcC51c2UoY29ycygpKTtcclxuYXBwLnVzZShsb2dnZXIoXCJkZXZcIikpO1xyXG5hcHAudXNlKFxyXG4gIFwiL2FwaS1kb2NzXCIsXHJcbiAgc3dhZ2dlclVpLnNlcnZlLFxyXG4gIHN3YWdnZXJVaS5zZXR1cChzd2FnZ2VyRG9jdW1lbnQsIHtcclxuICAgIGV4cGxvcmVyOiB0cnVlLFxyXG4gIH0pXHJcbik7XHJcbmFwcC51c2UoXCIvYXBpXCIsIHJlc3RSb3V0ZXIpO1xyXG5hcHAudXNlKChyZXEsIHJlcywgbmV4dCkgPT4ge1xyXG4gIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKFwiTm90IEZvdW5kIVwiKTtcclxuICBlcnJvci5tZXNzYWdlID0gXCJJbnZhbGlkIFJvdXRlXCI7XHJcbiAgZXJyb3Iuc3RhdHVzID0gU3RhdHVzQ29kZXMuTk9UX0ZPVU5EO1xyXG4gIG5leHQoZXJyb3IpO1xyXG59KTtcclxuYXBwLnVzZSgoZXJyb3IsIHJlcSwgcmVzLCBuZXh0KSA9PiB7XHJcbiAgcmVzLnN0YXR1cyhlcnJvci5zdGF0dXMgfHwgU3RhdHVzQ29kZXMuSU5URVJOQUxfU0VSVkVSX0VSUk9SKTtcclxuICByZXR1cm4gcmVzLmpzb24oe1xyXG4gICAgZXJyb3I6IHtcclxuICAgICAgbWVzc2FnZTogZXJyb3IubWVzc2FnZSxcclxuICAgIH0sXHJcbiAgfSk7XHJcbn0pO1xyXG5cclxuYXBwLmxpc3RlbihQT1JULCBmdW5jdGlvbiAoKSB7XHJcbiAgY29uc29sZS5sb2coYFNlcnZlciBpcyBydW5uaW5nIGF0ICR7UE9SVH1gKTtcclxufSk7XHJcbiJdfQ==